// FDX (Final Draft XML) export utility
export interface FDXExportOptions {
  title?: string;
  author?: string;
  includeNotes?: boolean;
  fontSize?: number;
}

export class FDXExporter {
  private static readonly FDX_HEADER = `<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<FinalDraft DocumentType="Script" Template="No" Version="1">
<Content>
<Paragraph Type="Scene Heading">
<Text>FADE IN:</Text>
</Paragraph>`;

  private static readonly FDX_FOOTER = `<Paragraph Type="Transition">
<Text>FADE OUT.</Text>
</Paragraph>
</Content>
</FinalDraft>`;

  static convertScriptToFDX(script: string, options: FDXExportOptions = {}): string {
    const lines = script.split('\n').filter(line => line.trim());
    let fdxContent = this.FDX_HEADER;

    for (const line of lines) {
      fdxContent += this.convertLineToFDX(line.trim());
    }

    fdxContent += this.FDX_FOOTER;
    return this.formatFDXDocument(fdxContent, options);
  }

  private static convertLineToFDX(line: string): string {
    if (!line) {
      return '';
    }

    // Scene headings (INT./EXT.)
    if (line.match(/^(INT\.|EXT\.)/i)) {
      return `<Paragraph Type="Scene Heading"><Text>${this.escapeXML(line)}</Text></Paragraph>\n`;
    }

    // Character names (ALL CAPS, typically centered)
    if (line.match(/^[A-Z][A-Z\s]+$/) && line.length < 30) {
      return `<Paragraph Type="Character Name"><Text>${this.escapeXML(line)}</Text></Paragraph>\n`;
    }

    // Parentheticals
    if (line.match(/^\(.+\)$/)) {
      return `<Paragraph Type="Parenthetical"><Text>${this.escapeXML(line)}</Text></Paragraph>\n`;
    }

    // Transitions (FADE OUT, CUT TO, etc.)
    if (line.match(/^(FADE|CUT|DISSOLVE|SMASH CUT)/i)) {
      return `<Paragraph Type="Transition"><Text>${this.escapeXML(line)}</Text></Paragraph>\n`;
    }

    // Dialogue (check if previous line was character name)
    if (line.length > 0 && !line.match(/^[A-Z\s]+$/)) {
      return `<Paragraph Type="Dialogue"><Text>${this.escapeXML(line)}</Text></Paragraph>\n`;
    }

    // Action/Description (default)
    return `<Paragraph Type="Action"><Text>${this.escapeXML(line)}</Text></Paragraph>\n`;
  }

  private static escapeXML(text: string): string {
    return text
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#39;');
  }

  private static formatFDXDocument(content: string, options: FDXExportOptions): string {
    const title = options.title || 'Untitled Script';
    const author = options.author || 'ScriptProShot User';
    
    return `<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<FinalDraft DocumentType="Script" Template="No" Version="1">
<HeaderAndFooter>
<Header>
<Text>${this.escapeXML(title)}</Text>
</Header>
<Footer>
<Text>Generated by ScriptProShot</Text>
</Footer>
</HeaderAndFooter>
<TitlePage>
<Content>
<Paragraph Type="Title">
<Text>${this.escapeXML(title)}</Text>
</Paragraph>
<Paragraph Type="Credit">
<Text>Written by</Text>
</Paragraph>
<Paragraph Type="Author">
<Text>${this.escapeXML(author)}</Text>
</Paragraph>
<Paragraph Type="Source">
<Text>Generated by ScriptProShot.com</Text>
</Paragraph>
<Paragraph Type="Draft date">
<Text>${new Date().toLocaleDateString()}</Text>
</Paragraph>
</Content>
</TitlePage>
${content}`;
  }

  static async generateDownloadBlob(script: string, options: FDXExportOptions = {}): Promise<Blob> {
    const fdxContent = this.convertScriptToFDX(script, options);
    return new Blob([fdxContent], { type: 'application/xml' });
  }

  static generateFilename(title?: string): string {
    const safeTitle = title?.replace(/[^a-zA-Z0-9\s-]/g, '').replace(/\s+/g, '_') || 'script';
    const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
    return `${safeTitle}_${timestamp}.fdx`;
  }
}

// Mock FDX content for testing
export const SAMPLE_FDX = `<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<FinalDraft DocumentType="Script" Template="No" Version="1">
<HeaderAndFooter>
<Header>
<Text>Sample Script</Text>
</Header>
</HeaderAndFooter>
<Content>
<Paragraph Type="Scene Heading">
<Text>INT. COFFEE SHOP - DAY</Text>
</Paragraph>
<Paragraph Type="Action">
<Text>SARAH (20s, barista) wipes down the counter as MIKE (30s, freelance writer) approaches with his laptop.</Text>
</Paragraph>
<Paragraph Type="Character Name">
<Text>SARAH</Text>
</Paragraph>
<Paragraph Type="Parenthetical">
<Text>(cheerful)</Text>
</Paragraph>
<Paragraph Type="Dialogue">
<Text>The usual? Large coffee, extra shot of creativity?</Text>
</Paragraph>
<Paragraph Type="Character Name">
<Text>MIKE</Text>
</Paragraph>
<Paragraph Type="Parenthetical">
<Text>(sighing)</Text>
</Paragraph>
<Paragraph Type="Dialogue">
<Text>Make it a double shot. I've got writer's block the size of Mount Everest.</Text>
</Paragraph>
<Paragraph Type="Transition">
<Text>FADE OUT.</Text>
</Paragraph>
</Content>
</FinalDraft>`;